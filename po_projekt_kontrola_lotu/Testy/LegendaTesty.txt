using NUnit.Framework;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace po_projekt_kontrola_lotu.Testy
{
    [TestFixture]
    public class LegendaTesty
    {
        [Test]
        public void DodajdoLegendy_PowinnoZwracacGridWrazElipsemITekstem()
        {
            // Arrange
            Legenda legenda = new Legenda();
            string nazwa = "Test";
            Brush kolor = Brushes.Red;

            // Act
            Grid legendGrid = legenda.DodajdoLegendy(nazwa, kolor);

            // Assert
            Assert.IsNotNull(legendGrid);

            Assert.AreEqual(2, legendGrid.ColumnDefinitions.Count);

            Assert.AreEqual(20, ((Ellipse)legendGrid.Children[0]).Width); //czy szerokość 20?
            Assert.AreEqual(20, ((Ellipse)legendGrid.Children[0]).Height); //czy wysokość 20?
            Assert.AreEqual(kolor, ((Ellipse)legendGrid.Children[0]).Fill); //czy kolor się zgadza?
            Assert.AreEqual(Brushes.Black, ((Ellipse)legendGrid.Children[0]).Stroke); //czy kolor obwódki się zgadza?
            Assert.AreEqual(1, ((Ellipse)legendGrid.Children[0]).StrokeThickness); // czy grubość linii się zgadza?
            Assert.AreEqual(new Thickness(0, 5, 1, 5), ((Ellipse)legendGrid.Children[0]).Margin); // czy Thickness się zgadza?
            Assert.AreEqual(nazwa, ((TextBlock)legendGrid.Children[1]).Text); // czy tekst się zgadza?
            Assert.AreEqual(VerticalAlignment.Center, ((TextBlock)legendGrid.Children[1]).VerticalAlignment); //czy ułożenie tekstu się zgadza?
            Assert.AreEqual(new Thickness(0, 0, 0, 0), ((TextBlock)legendGrid.Children[1]).Margin); // czy pogrubienie tekstu się zgadza?
        }
    }
}